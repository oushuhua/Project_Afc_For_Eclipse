package com.afc.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.afc.db.entity.KuMessage;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "KU_MESSAGE".
 */
public class KuMessageDao extends AbstractDao<KuMessage, Long> {
    public static final String TABLENAME = "KU_MESSAGE";

    /**
     * Properties of entity KuMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Reply_ID = new Property(1, Integer.class, "reply_ID", false, "REPLY__ID");
        public final static Property Reply_ContentType = new Property(2, Integer.class, "reply_ContentType", false, "REPLY__CONTENT_TYPE");
        public final static Property Reply_MessageType = new Property(3, Integer.class, "reply_MessageType", false, "REPLY__MESSAGE_TYPE");
        public final static Property Qes_ID = new Property(4, Integer.class, "qes_ID", false, "QES__ID");
        public final static Property Reply_From_UserType = new Property(5, Integer.class, "reply_From_UserType", false, "REPLY__FROM__USER_TYPE");
        public final static Property FromApp = new Property(6, Integer.class, "fromApp", false, "FROM_APP");
        public final static Property Reply_State = new Property(7, Integer.class, "reply_State", false, "REPLY__STATE");
        public final static Property SelfSended = new Property(8, Boolean.class, "selfSended", false, "SELF_SENDED");
        public final static Property IsFailed = new Property(9, Boolean.class, "isFailed", false, "IS_FAILED");
        public final static Property Reply_Message = new Property(10, String.class, "reply_Message", false, "REPLY__MESSAGE");
        public final static Property Reply_AddTime = new Property(11, String.class, "reply_AddTime", false, "REPLY__ADD_TIME");
        public final static Property Reply_From_ID = new Property(12, String.class, "reply_From_ID", false, "REPLY__FROM__ID");
        public final static Property Reply_To_ID = new Property(13, String.class, "reply_To_ID", false, "REPLY__TO__ID");
        public final static Property Direct = new Property(14, Integer.class, "direct", false, "DIRECT");
        public final static Property OrderNumber = new Property(15, String.class, "orderNumber", false, "ORDER_NUMBER");
    };


    public KuMessageDao(DaoConfig config) {
        super(config);
    }

    public KuMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KU_MESSAGE\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"REPLY__ID\" INTEGER," + // 1: reply_ID
                "\"REPLY__CONTENT_TYPE\" INTEGER," + // 2: reply_ContentType
                "\"REPLY__MESSAGE_TYPE\" INTEGER," + // 3: reply_MessageType
                "\"QES__ID\" INTEGER," + // 4: qes_ID
                "\"REPLY__FROM__USER_TYPE\" INTEGER," + // 5: reply_From_UserType
                "\"FROM_APP\" INTEGER," + // 6: fromApp
                "\"REPLY__STATE\" INTEGER," + // 7: reply_State
                "\"SELF_SENDED\" INTEGER," + // 8: selfSended
                "\"IS_FAILED\" INTEGER," + // 9: isFailed
                "\"REPLY__MESSAGE\" TEXT," + // 10: reply_Message
                "\"REPLY__ADD_TIME\" TEXT," + // 11: reply_AddTime
                "\"REPLY__FROM__ID\" TEXT," + // 12: reply_From_ID
                "\"REPLY__TO__ID\" TEXT," + // 13: reply_To_ID
                "\"DIRECT\" INTEGER," + // 14: direct
                "\"ORDER_NUMBER\" TEXT);"); // 15: orderNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KU_MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KuMessage entity) {
        stmt.clearBindings();

        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }

        Integer reply_ID = entity.getReply_ID();
        if (reply_ID != null) {
            stmt.bindLong(2, reply_ID);
        }

        Integer reply_ContentType = entity.getReply_ContentType();
        if (reply_ContentType != null) {
            stmt.bindLong(3, reply_ContentType);
        }

        Integer reply_MessageType = entity.getReply_MessageType();
        if (reply_MessageType != null) {
            stmt.bindLong(4, reply_MessageType);
        }

        Integer qes_ID = entity.getQes_ID();
        if (qes_ID != null) {
            stmt.bindLong(5, qes_ID);
        }

        Integer reply_From_UserType = entity.getReply_From_UserType();
        if (reply_From_UserType != null) {
            stmt.bindLong(6, reply_From_UserType);
        }

        Integer fromApp = entity.getFromApp();
        if (fromApp != null) {
            stmt.bindLong(7, fromApp);
        }

        Integer reply_State = entity.getReply_State();
        if (reply_State != null) {
            stmt.bindLong(8, reply_State);
        }

        Boolean selfSended = entity.getSelfSended();
        if (selfSended != null) {
            stmt.bindLong(9, selfSended ? 1L: 0L);
        }

        Boolean isFailed = entity.getIsFailed();
        if (isFailed != null) {
            stmt.bindLong(10, isFailed ? 1L: 0L);
        }

        String reply_Message = entity.getReply_Message();
        if (reply_Message != null) {
            stmt.bindString(11, reply_Message);
        }

        String reply_AddTime = entity.getReply_AddTime();
        if (reply_AddTime != null) {
            stmt.bindString(12, reply_AddTime);
        }

        String reply_From_ID = entity.getReply_From_ID();
        if (reply_From_ID != null) {
            stmt.bindString(13, reply_From_ID);
        }

        String reply_To_ID = entity.getReply_To_ID();
        if (reply_To_ID != null) {
            stmt.bindString(14, reply_To_ID);
        }

        Integer direct = entity.getDirect();
        if (direct != null) {
            stmt.bindLong(15, direct);
        }

        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(16, orderNumber);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public KuMessage readEntity(Cursor cursor, int offset) {
        KuMessage entity = new KuMessage( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // reply_ID
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // reply_ContentType
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // reply_MessageType
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // qes_ID
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // reply_From_UserType
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // fromApp
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // reply_State
                cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // selfSended
                cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isFailed
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // reply_Message
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // reply_AddTime
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // reply_From_ID
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // reply_To_ID
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // direct
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // orderNumber
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KuMessage entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReply_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setReply_ContentType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setReply_MessageType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setQes_ID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setReply_From_UserType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFromApp(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReply_State(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSelfSended(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsFailed(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setReply_Message(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReply_AddTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReply_From_ID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReply_To_ID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDirect(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setOrderNumber(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KuMessage entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(KuMessage entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
